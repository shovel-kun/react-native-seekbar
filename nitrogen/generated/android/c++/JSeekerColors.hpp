///
/// JSeekerColors.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "SeekerColors.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::seekbar {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "SeekerColors" and the the Kotlin data class "SeekerColors".
   */
  struct JSeekerColors final: public jni::JavaClass<JSeekerColors> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/seekbar/SeekerColors;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct SeekerColors by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    SeekerColors toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldProgressColor = clazz->getField<jni::JString>("progressColor");
      jni::local_ref<jni::JString> progressColor = this->getFieldValue(fieldProgressColor);
      static const auto fieldDisabledProgressColor = clazz->getField<jni::JString>("disabledProgressColor");
      jni::local_ref<jni::JString> disabledProgressColor = this->getFieldValue(fieldDisabledProgressColor);
      static const auto fieldTrackColor = clazz->getField<jni::JString>("trackColor");
      jni::local_ref<jni::JString> trackColor = this->getFieldValue(fieldTrackColor);
      static const auto fieldDisabledTrackColor = clazz->getField<jni::JString>("disabledTrackColor");
      jni::local_ref<jni::JString> disabledTrackColor = this->getFieldValue(fieldDisabledTrackColor);
      static const auto fieldThumbColor = clazz->getField<jni::JString>("thumbColor");
      jni::local_ref<jni::JString> thumbColor = this->getFieldValue(fieldThumbColor);
      static const auto fieldDisabledThumbColor = clazz->getField<jni::JString>("disabledThumbColor");
      jni::local_ref<jni::JString> disabledThumbColor = this->getFieldValue(fieldDisabledThumbColor);
      static const auto fieldReadAheadColor = clazz->getField<jni::JString>("readAheadColor");
      jni::local_ref<jni::JString> readAheadColor = this->getFieldValue(fieldReadAheadColor);
      return SeekerColors(
        progressColor != nullptr ? std::make_optional(progressColor->toStdString()) : std::nullopt,
        disabledProgressColor != nullptr ? std::make_optional(disabledProgressColor->toStdString()) : std::nullopt,
        trackColor != nullptr ? std::make_optional(trackColor->toStdString()) : std::nullopt,
        disabledTrackColor != nullptr ? std::make_optional(disabledTrackColor->toStdString()) : std::nullopt,
        thumbColor != nullptr ? std::make_optional(thumbColor->toStdString()) : std::nullopt,
        disabledThumbColor != nullptr ? std::make_optional(disabledThumbColor->toStdString()) : std::nullopt,
        readAheadColor != nullptr ? std::make_optional(readAheadColor->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JSeekerColors::javaobject> fromCpp(const SeekerColors& value) {
      return newInstance(
        value.progressColor.has_value() ? jni::make_jstring(value.progressColor.value()) : nullptr,
        value.disabledProgressColor.has_value() ? jni::make_jstring(value.disabledProgressColor.value()) : nullptr,
        value.trackColor.has_value() ? jni::make_jstring(value.trackColor.value()) : nullptr,
        value.disabledTrackColor.has_value() ? jni::make_jstring(value.disabledTrackColor.value()) : nullptr,
        value.thumbColor.has_value() ? jni::make_jstring(value.thumbColor.value()) : nullptr,
        value.disabledThumbColor.has_value() ? jni::make_jstring(value.disabledThumbColor.value()) : nullptr,
        value.readAheadColor.has_value() ? jni::make_jstring(value.readAheadColor.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::seekbar
