///
/// HybridSeekbarSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridSeekbarSpec.hpp"




namespace margelo::nitro::seekbar {

  using namespace facebook;

  class JHybridSeekbarSpec: public jni::HybridClass<JHybridSeekbarSpec, JHybridObject>,
                            public virtual HybridSeekbarSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/seekbar/HybridSeekbarSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridSeekbarSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridSeekbarSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridSeekbarSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridSeekbarSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::optional<double> getPosition() override;
    void setPosition(std::optional<double> position) override;
    std::optional<double> getDuration() override;
    void setDuration(std::optional<double> duration) override;
    std::optional<double> getReadAheadValue() override;
    void setReadAheadValue(std::optional<double> readAheadValue) override;
    std::optional<std::function<void(double /* value */)>> getOnValueChange() override;
    void setOnValueChange(const std::optional<std::function<void(double /* value */)>>& onValueChange) override;
    std::optional<std::function<void()>> getOnValueChangeFinished() override;
    void setOnValueChangeFinished(const std::optional<std::function<void()>>& onValueChangeFinished) override;
    std::optional<std::function<void(const Segment& /* segment */)>> getOnSegmentChange() override;
    void setOnSegmentChange(const std::optional<std::function<void(const Segment& /* segment */)>>& onSegmentChange) override;
    std::optional<std::vector<Segment>> getSegments() override;
    void setSegments(const std::optional<std::vector<Segment>>& segments) override;
    std::optional<SeekerColors> getSeekerColors() override;
    void setSeekerColors(const std::optional<SeekerColors>& seekerColors) override;
    std::optional<SeekerDimensions> getSeekerDimensions() override;
    void setSeekerDimensions(const std::optional<SeekerDimensions>& seekerDimensions) override;

  public:
    // Methods
    

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridSeekbarSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::seekbar
