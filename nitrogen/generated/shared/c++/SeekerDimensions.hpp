///
/// SeekerDimensions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::seekbar {

  /**
   * A struct which can be represented as a JavaScript object (SeekerDimensions).
   */
  struct SeekerDimensions {
  public:
    std::optional<double> trackHeight     SWIFT_PRIVATE;
    std::optional<double> progressHeight     SWIFT_PRIVATE;
    std::optional<double> thumbRadius     SWIFT_PRIVATE;
    std::optional<double> gap     SWIFT_PRIVATE;

  public:
    SeekerDimensions() = default;
    explicit SeekerDimensions(std::optional<double> trackHeight, std::optional<double> progressHeight, std::optional<double> thumbRadius, std::optional<double> gap): trackHeight(trackHeight), progressHeight(progressHeight), thumbRadius(thumbRadius), gap(gap) {}
  };

} // namespace margelo::nitro::seekbar

namespace margelo::nitro {

  using namespace margelo::nitro::seekbar;

  // C++ SeekerDimensions <> JS SeekerDimensions (object)
  template <>
  struct JSIConverter<SeekerDimensions> final {
    static inline SeekerDimensions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SeekerDimensions(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "trackHeight")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "progressHeight")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "thumbRadius")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "gap"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SeekerDimensions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "trackHeight", JSIConverter<std::optional<double>>::toJSI(runtime, arg.trackHeight));
      obj.setProperty(runtime, "progressHeight", JSIConverter<std::optional<double>>::toJSI(runtime, arg.progressHeight));
      obj.setProperty(runtime, "thumbRadius", JSIConverter<std::optional<double>>::toJSI(runtime, arg.thumbRadius));
      obj.setProperty(runtime, "gap", JSIConverter<std::optional<double>>::toJSI(runtime, arg.gap));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "trackHeight"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "progressHeight"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "thumbRadius"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "gap"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
