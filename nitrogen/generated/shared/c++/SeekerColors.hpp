///
/// SeekerColors.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::seekbar {

  /**
   * A struct which can be represented as a JavaScript object (SeekerColors).
   */
  struct SeekerColors {
  public:
    std::optional<std::string> progressColor     SWIFT_PRIVATE;
    std::optional<std::string> disabledProgressColor     SWIFT_PRIVATE;
    std::optional<std::string> trackColor     SWIFT_PRIVATE;
    std::optional<std::string> disabledTrackColor     SWIFT_PRIVATE;
    std::optional<std::string> thumbColor     SWIFT_PRIVATE;
    std::optional<std::string> disabledThumbColor     SWIFT_PRIVATE;
    std::optional<std::string> readAheadColor     SWIFT_PRIVATE;

  public:
    SeekerColors() = default;
    explicit SeekerColors(std::optional<std::string> progressColor, std::optional<std::string> disabledProgressColor, std::optional<std::string> trackColor, std::optional<std::string> disabledTrackColor, std::optional<std::string> thumbColor, std::optional<std::string> disabledThumbColor, std::optional<std::string> readAheadColor): progressColor(progressColor), disabledProgressColor(disabledProgressColor), trackColor(trackColor), disabledTrackColor(disabledTrackColor), thumbColor(thumbColor), disabledThumbColor(disabledThumbColor), readAheadColor(readAheadColor) {}
  };

} // namespace margelo::nitro::seekbar

namespace margelo::nitro {

  using namespace margelo::nitro::seekbar;

  // C++ SeekerColors <> JS SeekerColors (object)
  template <>
  struct JSIConverter<SeekerColors> final {
    static inline SeekerColors fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SeekerColors(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "progressColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "disabledProgressColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "trackColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "disabledTrackColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "thumbColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "disabledThumbColor")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "readAheadColor"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SeekerColors& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "progressColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.progressColor));
      obj.setProperty(runtime, "disabledProgressColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.disabledProgressColor));
      obj.setProperty(runtime, "trackColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.trackColor));
      obj.setProperty(runtime, "disabledTrackColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.disabledTrackColor));
      obj.setProperty(runtime, "thumbColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.thumbColor));
      obj.setProperty(runtime, "disabledThumbColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.disabledThumbColor));
      obj.setProperty(runtime, "readAheadColor", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.readAheadColor));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "progressColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "disabledProgressColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "trackColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "disabledTrackColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "thumbColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "disabledThumbColor"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "readAheadColor"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
