///
/// HybridSeekbarSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Segment` to properly resolve imports.
namespace margelo::nitro::seekbar { struct Segment; }
// Forward declaration of `SeekerColors` to properly resolve imports.
namespace margelo::nitro::seekbar { struct SeekerColors; }
// Forward declaration of `SeekerDimensions` to properly resolve imports.
namespace margelo::nitro::seekbar { struct SeekerDimensions; }

#include <optional>
#include <functional>
#include "Segment.hpp"
#include <vector>
#include "SeekerColors.hpp"
#include "SeekerDimensions.hpp"

namespace margelo::nitro::seekbar {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Seekbar`
   * Inherit this class to create instances of `HybridSeekbarSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridSeekbar: public HybridSeekbarSpec {
   * public:
   *   HybridSeekbar(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridSeekbarSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridSeekbarSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridSeekbarSpec() override = default;

    public:
      // Properties
      virtual std::optional<double> getPosition() = 0;
      virtual void setPosition(std::optional<double> position) = 0;
      virtual std::optional<double> getDuration() = 0;
      virtual void setDuration(std::optional<double> duration) = 0;
      virtual std::optional<double> getReadAheadValue() = 0;
      virtual void setReadAheadValue(std::optional<double> readAheadValue) = 0;
      virtual std::optional<std::function<void(double /* value */)>> getOnValueChange() = 0;
      virtual void setOnValueChange(const std::optional<std::function<void(double /* value */)>>& onValueChange) = 0;
      virtual std::optional<std::function<void()>> getOnValueChangeFinished() = 0;
      virtual void setOnValueChangeFinished(const std::optional<std::function<void()>>& onValueChangeFinished) = 0;
      virtual std::optional<std::function<void(const Segment& /* segment */)>> getOnSegmentChange() = 0;
      virtual void setOnSegmentChange(const std::optional<std::function<void(const Segment& /* segment */)>>& onSegmentChange) = 0;
      virtual std::optional<std::vector<Segment>> getSegments() = 0;
      virtual void setSegments(const std::optional<std::vector<Segment>>& segments) = 0;
      virtual std::optional<SeekerColors> getSeekerColors() = 0;
      virtual void setSeekerColors(const std::optional<SeekerColors>& seekerColors) = 0;
      virtual std::optional<SeekerDimensions> getSeekerDimensions() = 0;
      virtual void setSeekerDimensions(const std::optional<SeekerDimensions>& seekerDimensions) = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Seekbar";
  };

} // namespace margelo::nitro::seekbar
