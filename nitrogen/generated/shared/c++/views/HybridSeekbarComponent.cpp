///
/// HybridSeekbarComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridSeekbarComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::seekbar::views {

  extern const char HybridSeekbarComponentName[] = "Seekbar";

  HybridSeekbarProps::HybridSeekbarProps(const react::PropsParserContext& context,
                                         const HybridSeekbarProps& sourceProps,
                                         const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    position([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("position", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.position;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.position);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.position: ") + exc.what());
      }
    }()),
    duration([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("duration", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.duration;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.duration);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.duration: ") + exc.what());
      }
    }()),
    readAheadValue([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("readAheadValue", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.readAheadValue;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.readAheadValue);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.readAheadValue: ") + exc.what());
      }
    }()),
    onValueChange([&]() -> CachedProp<std::optional<std::function<void(double /* value */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onValueChange", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onValueChange;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(double /* value */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onValueChange);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.onValueChange: ") + exc.what());
      }
    }()),
    onValueChangeFinished([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onValueChangeFinished", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onValueChangeFinished;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onValueChangeFinished);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.onValueChangeFinished: ") + exc.what());
      }
    }()),
    onSegmentChange([&]() -> CachedProp<std::optional<std::function<void(const Segment& /* segment */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onSegmentChange", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onSegmentChange;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const Segment& /* segment */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onSegmentChange);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.onSegmentChange: ") + exc.what());
      }
    }()),
    segments([&]() -> CachedProp<std::optional<std::vector<Segment>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("segments", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.segments;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::vector<Segment>>>::fromRawValue(*runtime, value, sourceProps.segments);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.segments: ") + exc.what());
      }
    }()),
    seekerColors([&]() -> CachedProp<std::optional<SeekerColors>> {
      try {
        const react::RawValue* rawValue = rawProps.at("seekerColors", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.seekerColors;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<SeekerColors>>::fromRawValue(*runtime, value, sourceProps.seekerColors);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.seekerColors: ") + exc.what());
      }
    }()),
    seekerDimensions([&]() -> CachedProp<std::optional<SeekerDimensions>> {
      try {
        const react::RawValue* rawValue = rawProps.at("seekerDimensions", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.seekerDimensions;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<SeekerDimensions>>::fromRawValue(*runtime, value, sourceProps.seekerDimensions);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.seekerDimensions: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::seekbar::HybridSeekbarSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::seekbar::HybridSeekbarSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Seekbar.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridSeekbarProps::HybridSeekbarProps(const HybridSeekbarProps& other):
    react::ViewProps(),
    position(other.position),
    duration(other.duration),
    readAheadValue(other.readAheadValue),
    onValueChange(other.onValueChange),
    onValueChangeFinished(other.onValueChangeFinished),
    onSegmentChange(other.onSegmentChange),
    segments(other.segments),
    seekerColors(other.seekerColors),
    seekerDimensions(other.seekerDimensions),
    hybridRef(other.hybridRef) { }

  bool HybridSeekbarProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("position"): return true;
      case hashString("duration"): return true;
      case hashString("readAheadValue"): return true;
      case hashString("onValueChange"): return true;
      case hashString("onValueChangeFinished"): return true;
      case hashString("onSegmentChange"): return true;
      case hashString("segments"): return true;
      case hashString("seekerColors"): return true;
      case hashString("seekerDimensions"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridSeekbarComponentDescriptor::HybridSeekbarComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridSeekbarComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                    const react::Props::Shared& props,
                                                                    react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridSeekbarShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridSeekbarComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridSeekbarShadowNode&>(shadowNode);
    const HybridSeekbarProps& props = concreteShadowNode.getConcreteProps();
    HybridSeekbarState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::seekbar::views
