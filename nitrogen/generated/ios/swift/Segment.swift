///
/// Segment.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `Segment`, backed by a C++ struct.
 */
public typealias Segment = margelo.nitro.seekbar.Segment

public extension Segment {
  private typealias bridge = margelo.nitro.seekbar.bridge.swift

  /**
   * Create a new instance of `Segment`.
   */
  init(name: String, start: Double, color: String?) {
    self.init(std.string(name), start, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = color {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
  
  var start: Double {
    @inline(__always)
    get {
      return self.__start
    }
    @inline(__always)
    set {
      self.__start = newValue
    }
  }
  
  var color: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__color.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__color = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
