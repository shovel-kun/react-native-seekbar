///
/// HybridSeekbarSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridSeekbarSpec``
public protocol HybridSeekbarSpec_protocol: HybridObject, HybridView {
  // Properties
  var position: Double? { get set }
  var duration: Double? { get set }
  var readAheadValue: Double? { get set }
  var onValueChange: ((_ value: Double) -> Void)? { get set }
  var onValueChangeFinished: (() -> Void)? { get set }
  var onSegmentChange: ((_ segment: Segment) -> Void)? { get set }
  var segments: [Segment]? { get set }
  var seekerColors: SeekerColors? { get set }
  var seekerDimensions: SeekerDimensions? { get set }

  // Methods
  
}

/// See ``HybridSeekbarSpec``
public class HybridSeekbarSpec_base {
  private weak var cxxWrapper: HybridSeekbarSpec_cxx? = nil
  public func getCxxWrapper() -> HybridSeekbarSpec_cxx {
  #if DEBUG
    guard self is HybridSeekbarSpec else {
      fatalError("`self` is not a `HybridSeekbarSpec`! Did you accidentally inherit from `HybridSeekbarSpec_base` instead of `HybridSeekbarSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridSeekbarSpec_cxx(self as! HybridSeekbarSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Seekbar HybridObject.
 * Implement this protocol to create Swift-based instances of Seekbar.
 * ```swift
 * class HybridSeekbar : HybridSeekbarSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridSeekbarSpec = HybridSeekbarSpec_protocol & HybridSeekbarSpec_base
