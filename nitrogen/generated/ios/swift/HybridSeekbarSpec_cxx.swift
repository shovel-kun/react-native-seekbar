///
/// HybridSeekbarSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridSeekbarSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridSeekbarSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::seekbar::bridge::swift`)
   * from `Seekbar-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.seekbar.bridge.swift

  /**
   * Holds an instance of the `HybridSeekbarSpec` Swift protocol.
   */
  private var __implementation: any HybridSeekbarSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__seekbar__HybridSeekbarSpec_

  /**
   * Create a new `HybridSeekbarSpec_cxx` that wraps the given `HybridSeekbarSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridSeekbarSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridSeekbarSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridSeekbarSpec() -> any HybridSeekbarSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridSeekbarSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridSeekbarSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridSeekbarSpec_cxx {
    return Unmanaged<HybridSeekbarSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::seekbar::HybridSeekbarSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__seekbar__HybridSeekbarSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__seekbar__HybridSeekbarSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__seekbar__HybridSeekbarSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  public final var position: bridge.std__optional_double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = self.__implementation.position {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.position = newValue.value
    }
  }
  
  public final var duration: bridge.std__optional_double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = self.__implementation.duration {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.duration = newValue.value
    }
  }
  
  public final var readAheadValue: bridge.std__optional_double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = self.__implementation.readAheadValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.readAheadValue = newValue.value
    }
  }
  
  public final var onValueChange: bridge.std__optional_std__function_void_double____value______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_double____value______ in
        if let __unwrappedValue = self.__implementation.onValueChange {
          return bridge.create_std__optional_std__function_void_double____value______({ () -> bridge.Func_void_double in
            let __closureWrapper = Func_void_double(__unwrappedValue)
            return bridge.create_Func_void_double(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onValueChange = { () -> ((_ value: Double) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Double) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_double(__unwrapped)
            return { (__value: Double) -> Void in
              __wrappedFunction.call(__value)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onValueChangeFinished: bridge.std__optional_std__function_void____ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void____ in
        if let __unwrappedValue = self.__implementation.onValueChangeFinished {
          return bridge.create_std__optional_std__function_void____({ () -> bridge.Func_void in
            let __closureWrapper = Func_void(__unwrappedValue)
            return bridge.create_Func_void(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onValueChangeFinished = { () -> (() -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> () -> Void in
            let __wrappedFunction = bridge.wrap_Func_void(__unwrapped)
            return { () -> Void in
              __wrappedFunction.call()
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onSegmentChange: bridge.std__optional_std__function_void_const_Segment_____segment______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_Segment_____segment______ in
        if let __unwrappedValue = self.__implementation.onSegmentChange {
          return bridge.create_std__optional_std__function_void_const_Segment_____segment______({ () -> bridge.Func_void_Segment in
            let __closureWrapper = Func_void_Segment(__unwrappedValue)
            return bridge.create_Func_void_Segment(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onSegmentChange = { () -> ((_ segment: Segment) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Segment) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_Segment(__unwrapped)
            return { (__segment: Segment) -> Void in
              __wrappedFunction.call(__segment)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var segments: bridge.std__optional_std__vector_Segment__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__vector_Segment__ in
        if let __unwrappedValue = self.__implementation.segments {
          return bridge.create_std__optional_std__vector_Segment__({ () -> bridge.std__vector_Segment_ in
            var __vector = bridge.create_std__vector_Segment_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.segments = { () -> [Segment]? in
        if let __unwrapped = newValue.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var seekerColors: bridge.std__optional_SeekerColors_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_SeekerColors_ in
        if let __unwrappedValue = self.__implementation.seekerColors {
          return bridge.create_std__optional_SeekerColors_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.seekerColors = { () -> SeekerColors? in
        if let __unwrapped = newValue.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var seekerDimensions: bridge.std__optional_SeekerDimensions_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_SeekerDimensions_ in
        if let __unwrappedValue = self.__implementation.seekerDimensions {
          return bridge.create_std__optional_SeekerDimensions_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.seekerDimensions = { () -> SeekerDimensions? in
        if let __unwrapped = newValue.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
