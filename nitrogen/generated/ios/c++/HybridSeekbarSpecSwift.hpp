///
/// HybridSeekbarSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridSeekbarSpec.hpp"

// Forward declaration of `HybridSeekbarSpec_cxx` to properly resolve imports.
namespace Seekbar { class HybridSeekbarSpec_cxx; }

// Forward declaration of `Segment` to properly resolve imports.
namespace margelo::nitro::seekbar { struct Segment; }
// Forward declaration of `SeekerColors` to properly resolve imports.
namespace margelo::nitro::seekbar { struct SeekerColors; }
// Forward declaration of `SeekerDimensions` to properly resolve imports.
namespace margelo::nitro::seekbar { struct SeekerDimensions; }

#include <optional>
#include <functional>
#include "Segment.hpp"
#include <string>
#include <vector>
#include "SeekerColors.hpp"
#include "SeekerDimensions.hpp"

#include "Seekbar-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::seekbar {

  /**
   * The C++ part of HybridSeekbarSpec_cxx.swift.
   *
   * HybridSeekbarSpecSwift (C++) accesses HybridSeekbarSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridSeekbarSpec_cxx can directly inherit from the C++ class HybridSeekbarSpec
   * to simplify the whole structure and memory management.
   */
  class HybridSeekbarSpecSwift: public virtual HybridSeekbarSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridSeekbarSpecSwift(const Seekbar::HybridSeekbarSpec_cxx& swiftPart):
      HybridObject(HybridSeekbarSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Seekbar::HybridSeekbarSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::optional<double> getPosition() noexcept override {
      auto __result = _swiftPart.getPosition();
      return __result;
    }
    inline void setPosition(std::optional<double> position) noexcept override {
      _swiftPart.setPosition(position);
    }
    inline std::optional<double> getDuration() noexcept override {
      auto __result = _swiftPart.getDuration();
      return __result;
    }
    inline void setDuration(std::optional<double> duration) noexcept override {
      _swiftPart.setDuration(duration);
    }
    inline std::optional<double> getReadAheadValue() noexcept override {
      auto __result = _swiftPart.getReadAheadValue();
      return __result;
    }
    inline void setReadAheadValue(std::optional<double> readAheadValue) noexcept override {
      _swiftPart.setReadAheadValue(readAheadValue);
    }
    inline std::optional<std::function<void(double /* value */)>> getOnValueChange() noexcept override {
      auto __result = _swiftPart.getOnValueChange();
      return __result;
    }
    inline void setOnValueChange(const std::optional<std::function<void(double /* value */)>>& onValueChange) noexcept override {
      _swiftPart.setOnValueChange(onValueChange);
    }
    inline std::optional<std::function<void()>> getOnValueChangeFinished() noexcept override {
      auto __result = _swiftPart.getOnValueChangeFinished();
      return __result;
    }
    inline void setOnValueChangeFinished(const std::optional<std::function<void()>>& onValueChangeFinished) noexcept override {
      _swiftPart.setOnValueChangeFinished(onValueChangeFinished);
    }
    inline std::optional<std::function<void(const Segment& /* segment */)>> getOnSegmentChange() noexcept override {
      auto __result = _swiftPart.getOnSegmentChange();
      return __result;
    }
    inline void setOnSegmentChange(const std::optional<std::function<void(const Segment& /* segment */)>>& onSegmentChange) noexcept override {
      _swiftPart.setOnSegmentChange(onSegmentChange);
    }
    inline std::optional<std::vector<Segment>> getSegments() noexcept override {
      auto __result = _swiftPart.getSegments();
      return __result;
    }
    inline void setSegments(const std::optional<std::vector<Segment>>& segments) noexcept override {
      _swiftPart.setSegments(segments);
    }
    inline std::optional<SeekerColors> getSeekerColors() noexcept override {
      auto __result = _swiftPart.getSeekerColors();
      return __result;
    }
    inline void setSeekerColors(const std::optional<SeekerColors>& seekerColors) noexcept override {
      _swiftPart.setSeekerColors(seekerColors);
    }
    inline std::optional<SeekerDimensions> getSeekerDimensions() noexcept override {
      auto __result = _swiftPart.getSeekerDimensions();
      return __result;
    }
    inline void setSeekerDimensions(const std::optional<SeekerDimensions>& seekerDimensions) noexcept override {
      _swiftPart.setSeekerDimensions(seekerDimensions);
    }

  public:
    // Methods
    

  private:
    Seekbar::HybridSeekbarSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::seekbar
