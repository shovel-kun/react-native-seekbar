# 🔗 Links:
# Source file: https://github.com/obytes/react-native-template-obytes/blob/master/.github/workflows/e2e-android.yml
# End-to-end testing: https://starter.obytes.com/testing/end-to-end-testing/

# ✍️ Description:
# This workflow is used to run end-to-end tests on Android using Maestro.
# As a first step, it will generate a test APK using the Gradle build and then upload it as an artifact.
# A new job will be started to run the tests using the test APK generated in the previous job.
# To test the app, we set up an Android emulator using the `reactivecircus/android-emulator-runner` action. This runner requires macOS as the operating system for the runner.
# This workflow will be triggered on pull requests (PRs) with the label "android-test-github" or can be manually triggered from the Actions tab.
#

# 🚨 GITHUB SECRETS REQUIRED: None

name: E2E Tests Android (Maestro + Github Action)

on:
  workflow_dispatch:
  pull_request:
    branches: [main, master]

jobs:
  prepare:
    if: github.event_name != 'pull_request' || ( github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'android-test-github'))
    name: Generate Test APK (Gradle)
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout project repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: 📦 Install Project Dependencies
        run: bun install --frozen-lockfile
        shell: bash

      - name: 📦 Install Maestro
        id: install-maestro
        run: |
          bun run install-maestro
          echo "maestro-path=$HOME/.maestro/bin/maestro" >> $GITHUB_OUTPUT

      - name: Upload Maestro binary
        uses: actions/upload-artifact@v4
        with:
          name: maestro-bin
          path: ~/.maestro/bin/maestro
          if-no-files-found: error

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # --build-cache: Use cache (https://docs.gradle.org/current/userguide/build_cache.html)
      # --scan: Upload build scan (https://scans.gradle.com/)
      - name: Generate Test APK
        run: |
          cd example/android
          chmod +x ./gradlew
          ./gradlew assembleRelease --no-daemon --build-cache --scan
          cd ../..
        shell: bash
        env:
          EXPO_NO_DOTENV: '1'
          CI: 'true'

      - name: Upload Test APK
        uses: actions/upload-artifact@v4
        with:
          name: test-apk
          path: ./example/android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error

  # https://github.com/ReactiveCircus/android-emulator-runner
  test-android:
    name: Run Android E2E Tests (Maestro + Github Action)
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        api-level: [29, 33]

    steps:
      - name: 📦 Checkout project repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Download Test APK
        uses: actions/download-artifact@v4
        with:
          name: test-apk
          path: ${{ github.workspace }}

      - name: Download Maestro binary
        uses: actions/download-artifact@v4
        with:
          name: maestro-bin
          path: ~/.maestro/bin

      - name: Make Maestro binary executable
        run: chmod +x ~/.maestro/bin/maestro

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
        timeout-minutes: 5

      - name: Run tests with Maestro
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb install "${{ github.workspace }}/app-release.apk"
            $HOME/.maestro/bin/maestro test .maestro/ --format junit

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs
          path: ~/.maestro/tests/**/*

      - name: Store tests result
        uses: actions/upload-artifact@v4
        with:
          name: e2e_android_report
          path: |
            report.xml
